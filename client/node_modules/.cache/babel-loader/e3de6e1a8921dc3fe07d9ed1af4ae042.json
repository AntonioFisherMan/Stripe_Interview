{"ast":null,"code":"import { testAPI } from \"../api/api\";\nimport { returnErrors } from './SuccessErrorsReducer';\nimport { ClearStripeUserId } from './StripeReducer';\nconst USER_LOADING = \"USER_LOADING\";\nconst USER_LOADED = \"USER_LOADED\";\nconst AUTH_ERROR = \"AUTH_ERROR\";\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nconst LOGIN_FAIL = \"LOGIN_FAIL\";\nconst LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nconst REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nconst REGISTER_FAIL = \"REGISTER_FAIL\";\nconst initialState = {\n  token: sessionStorage.getItem(\"token\") || null,\n  isAuth: sessionStorage.getItem(\"isAuth\") || false,\n  isLoading: false,\n  user: JSON.parse(sessionStorage.getItem(\"user\")) || null\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      debugger;\n      sessionStorage.setItem(\"token\", action.payload.token);\n      sessionStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n      sessionStorage.setItem(\"isAuth\", true);\n      return { ...state,\n        isAuth: true,\n        token: action.payload.token,\n        user: action.payload.user\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      sessionStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n      sessionStorage.setItem(\"token\", action.payload.token);\n      sessionStorage.setItem(\"isAuth\", true);\n      return { ...state,\n        isAuth: true,\n        token: action.payload.token,\n        user: action.payload.user\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case REGISTER_FAIL:\n    case LOGOUT_SUCCESS:\n      sessionStorage.removeItem(\"token\");\n      sessionStorage.removeItem(\"user\");\n      sessionStorage.removeItem(\"isAuth\", false);\n      return { ...state,\n        isAuth: false,\n        isLoading: false,\n        user: null,\n        token: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const userLoad = payload => ({\n  type: USER_LOADED,\n  payload\n});\nexport const login = (email, password, rememberMe) => async dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n  testAPI.login(email, password, rememberMe).then(res => {\n    dispatch(userLoad(res.data, res.data.inform));\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, \"LOGIN_FAIL\"));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const register = (name, email, password) => dispatch => {\n  testAPI.register(name, email, password).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(userLoad(res.data));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const logout = () => (dispatch, getState) => {\n  dispatch({\n    type: LOGOUT_SUCCESS\n  });\n  dispatch(ClearStripeUserId());\n  testAPI.stripeDeauthorize(getState().stripe.stripeUserId, \"ca_HRRy5LDYgjjaJEOMX72ZW8Pm36cKmsN2\").then(res => {\n    dispatch(ClearStripeUserId());\n  }).catch(err => {\n    if (err.response.data.message.raw) dispatch(returnErrors(err.response.data.message.raw.message, err.response.data.message.type, \"STRIPE_DEAUTH_FAIL\"));\n  });\n};\nexport default AuthReducer;","map":{"version":3,"sources":["/Volumes/Anton/interview/client/src/redux/AuthReducer.js"],"names":["testAPI","returnErrors","ClearStripeUserId","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","initialState","token","sessionStorage","getItem","isAuth","isLoading","user","JSON","parse","AuthReducer","state","action","type","setItem","payload","stringify","removeItem","userLoad","login","email","password","rememberMe","dispatch","then","res","data","inform","catch","err","response","message","status","register","name","logout","getState","stripeDeauthorize","stripe","stripeUserId","raw"],"mappings":"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","sourcesContent":["\n\n\nimport { testAPI } from \"../api/api\";\nimport {returnErrors} from './SuccessErrorsReducer'\nimport {ClearStripeUserId} from './StripeReducer'\n\n  const USER_LOADING = \"USER_LOADING\";\n  const USER_LOADED = \"USER_LOADED\";\n  const AUTH_ERROR = \"AUTH_ERROR\";\n  const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\n  const LOGIN_FAIL = \"LOGIN_FAIL\";\n  const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\n  const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\n  const REGISTER_FAIL = \"REGISTER_FAIL\";\n  \n\n  \n  const initialState = {\n    token: sessionStorage.getItem(\"token\") || null,\n    isAuth: sessionStorage.getItem(\"isAuth\") || false,\n    isLoading: false,\n    user: JSON.parse(sessionStorage.getItem(\"user\")) ||null,\n  };\n  \n  const AuthReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case USER_LOADING:\n        return { ...state, isLoading: true };\n      case USER_LOADED:\n        debugger\n  \n        sessionStorage.setItem(\"token\", action.payload.token);\n        sessionStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n        sessionStorage.setItem(\"isAuth\", true);\n        return{...state,isAuth:true,token:action.payload.token,user:action.payload.user}\n      case LOGIN_SUCCESS:\n      case REGISTER_SUCCESS:\n        sessionStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n        sessionStorage.setItem(\"token\", action.payload.token);\n        sessionStorage.setItem(\"isAuth\", true);\n        return{...state,isAuth:true,token:action.payload.token,user:action.payload.user}\n\n      case AUTH_ERROR:\n      case LOGIN_FAIL:\n      case REGISTER_FAIL:\n      case LOGOUT_SUCCESS:\n        sessionStorage.removeItem(\"token\");\n        sessionStorage.removeItem(\"user\");\n        sessionStorage.removeItem(\"isAuth\",false);\n        return {\n          ...state,\n          isAuth: false,\n          isLoading: false,\n          user: null,\n          token: null\n        };\n  \n      default:\n        return state;\n    }\n  };\n  \n  export const userLoad = (payload) => ({type: USER_LOADED,payload});\n  \n\n  export const login = (email, password, rememberMe) => async (dispatch) => {\n    dispatch({ type: USER_LOADING });\n    testAPI.login(email, password, rememberMe).then((res) => {\n        dispatch(userLoad(res.data,res.data.inform));\n        dispatch({ type: LOGIN_SUCCESS, payload: res.data });\n      })\n      .catch((err) => {\n       dispatch(returnErrors(err.response.data.message,err.response.status,\"LOGIN_FAIL\"));\n        dispatch({ type: LOGIN_FAIL });\n      });\n  };\n  \n  export const register = (name, email, password) => (dispatch) => {\n    testAPI.register(name, email, password).then((res) => {\n        dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n        dispatch(userLoad(res.data));\n      })\n      .catch((err) => {\n        dispatch(\n          returnErrors(\n            err.response.data.message,\n            err.response.status,\n            \"REGISTER_FAIL\"\n          )\n        );\n        dispatch({ type: REGISTER_FAIL });\n      });\n  };\n  \n  export const logout = () => (dispatch,getState) => {\n    dispatch({ type: LOGOUT_SUCCESS });\n    dispatch(ClearStripeUserId())\n    testAPI.stripeDeauthorize(getState().stripe.stripeUserId,\"ca_HRRy5LDYgjjaJEOMX72ZW8Pm36cKmsN2\").then(res=>{\n      dispatch(ClearStripeUserId())\n    }).catch(err=>{\n   if(err.response.data.message.raw)dispatch(returnErrors(err.response.data.message.raw.message,err.response.data.message.type,\"STRIPE_DEAUTH_FAIL\"))  \n    })\n  };\n\n  \n  export default AuthReducer;\n  "]},"metadata":{},"sourceType":"module"}