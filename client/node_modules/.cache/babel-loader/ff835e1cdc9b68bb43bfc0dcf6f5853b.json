{"ast":null,"code":"import { testAPI } from \"../api/api\";\nimport { returnErrors } from './SuccessErrorsReducer';\nconst SET_PRODUCTS_AC = \"SET_PRODUCTS_AC\";\nconst SET_SUCCESS_PAYMENT = \"SET_SUCCESS_PAYMENT\";\nconst REMOVE_SUCCESS_PAYMENT = \"REMOVE_SUCCESS_PAYMENT\";\nconst SET_STRIPE_USER_ID = \"SET_STRIPE_USER_ID\";\nconst CLEAR_STRIPE_USER_ID = \"CLEAR_STRIPE_USER_ID\";\nconst initialState = {\n  products: [],\n  successOrder: false,\n  stripeUserId: null\n};\n\nconst StripeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_PRODUCTS_AC:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case SET_SUCCESS_PAYMENT:\n      return { ...state,\n        successOrder: true\n      };\n\n    case REMOVE_SUCCESS_PAYMENT:\n      return { ...state,\n        successOrder: false\n      };\n\n    case SET_STRIPE_USER_ID:\n      return { ...state,\n        stripeUserId: action.userId\n      };\n\n    case CLEAR_STRIPE_USER_ID:\n      return { ...state,\n        stripeUserId: null\n      };\n\n    default:\n      return state;\n  }\n}; //ACTIONS\n\n\nconst SetProductsAction = products => ({\n  type: SET_PRODUCTS_AC,\n  products\n});\n\nconst SetSuccessPayment = () => ({\n  type: SET_SUCCESS_PAYMENT\n});\n\nconst SetStripeUserId = userId => ({\n  type: SET_STRIPE_USER_ID,\n  userId\n});\n\nexport const RemoveSuccessOrder = () => ({\n  type: REMOVE_SUCCESS_PAYMENT\n});\nexport const ClearStripeUserId = () => ({\n  type: CLEAR_STRIPE_USER_ID\n}); //THUNK \n\nexport const MakePayment = data => dispatch => {\n  testAPI.makePaymentRequest(data).then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(SetSuccessPayment());\n    }\n  });\n};\nexport const GetProducts = () => dispatch => {\n  testAPI.getProductsRequest().then(res => {\n    dispatch(SetProductsAction(res.data.products));\n  });\n};\nexport const GetRequestStripe = () => dispatch => {\n  testAPI.requestStripeAuth();\n};\nexport const MakeAuthStripeRequest = code => dispatch => {\n  testAPI.makeAuthStripeRequest(code).then(res => {\n    dispatch(SetStripeUserId(res.data.item.stripe_user_id));\n  }).catch(err => {\n    if (err.response.data.message.raw.response) dispatch(returnErrors(err.response.data.message.raw.response.error.message, err.response.data.message.type, \"STRIPE_AUTH_FAIL\"));\n  });\n};\nexport default StripeReducer;","map":{"version":3,"sources":["/Volumes/Anton/interview/client/src/redux/StripeReducer.js"],"names":["testAPI","returnErrors","SET_PRODUCTS_AC","SET_SUCCESS_PAYMENT","REMOVE_SUCCESS_PAYMENT","SET_STRIPE_USER_ID","CLEAR_STRIPE_USER_ID","initialState","products","successOrder","stripeUserId","StripeReducer","state","action","type","userId","SetProductsAction","SetSuccessPayment","SetStripeUserId","RemoveSuccessOrder","ClearStripeUserId","MakePayment","data","dispatch","makePaymentRequest","then","res","resultCode","GetProducts","getProductsRequest","GetRequestStripe","requestStripeAuth","MakeAuthStripeRequest","code","makeAuthStripeRequest","item","stripe_user_id","catch","err","response","message","raw","error"],"mappings":"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","sourcesContent":["import { testAPI } from \"../api/api\";\nimport {returnErrors} from './SuccessErrorsReducer'\n\n\nconst SET_PRODUCTS_AC=\"SET_PRODUCTS_AC\"\nconst SET_SUCCESS_PAYMENT=\"SET_SUCCESS_PAYMENT\"\nconst REMOVE_SUCCESS_PAYMENT=\"REMOVE_SUCCESS_PAYMENT\"\nconst SET_STRIPE_USER_ID=\"SET_STRIPE_USER_ID\"\nconst CLEAR_STRIPE_USER_ID=\"CLEAR_STRIPE_USER_ID\"\n\n\nconst initialState={\n products:[],\n successOrder:false,\n stripeUserId:null\n}\n\nconst StripeReducer=(state=initialState,action)=>{\n    switch(action.type){\n     case SET_PRODUCTS_AC:\n     return{...state,products:[...action.products]}\n     case SET_SUCCESS_PAYMENT:\n       \n    return{...state,successOrder:true}\n    case REMOVE_SUCCESS_PAYMENT:\n        return{...state,successOrder:false}\ncase SET_STRIPE_USER_ID:\n    return{...state,stripeUserId:action.userId}\n    case CLEAR_STRIPE_USER_ID:\n        return{...state,stripeUserId:null}\n     default:return state\n    }\n}\n\n//ACTIONS\nconst SetProductsAction=(products)=>({type:SET_PRODUCTS_AC,products})\nconst SetSuccessPayment=()=>({type:SET_SUCCESS_PAYMENT})\nconst SetStripeUserId=(userId)=>({type:SET_STRIPE_USER_ID,userId})\nexport const RemoveSuccessOrder=()=>({type:REMOVE_SUCCESS_PAYMENT})\nexport const ClearStripeUserId=()=>({type:CLEAR_STRIPE_USER_ID})\n\n//THUNK \nexport const MakePayment=(data)=>dispatch=>{\n    testAPI.makePaymentRequest(data).then(res=>{\n        if(res.data.resultCode===0){\n            dispatch(SetSuccessPayment())\n        }\n    })\n}\nexport const GetProducts=()=>dispatch=>{\n    testAPI.getProductsRequest().then(res=>{\n        dispatch(SetProductsAction(res.data.products))\n    })\n}\nexport const GetRequestStripe=()=>dispatch=>{\n    testAPI.requestStripeAuth()\n}\nexport const MakeAuthStripeRequest=(code)=>dispatch=>{\n    testAPI.makeAuthStripeRequest(code).then(res=>{\n\n    dispatch(SetStripeUserId(res.data.item.stripe_user_id))\n    }).catch(err=>{\n        if(err.response.data.message.raw.response)dispatch(returnErrors(err.response.data.message.raw.response.error.message,err.response.data.message.type,\"STRIPE_AUTH_FAIL\"))  \n    })\n}\n\n\nexport default StripeReducer"]},"metadata":{},"sourceType":"module"}